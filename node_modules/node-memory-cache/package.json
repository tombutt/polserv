{
  "name": "node-memory-cache",
  "version": "0.0.5",
  "description": "An in-memory cache implementation.",
  "author": {
    "name": "Marco Palladino",
    "email": "marco@mashape.com"
  },
  "homepage": "https://github.com/thefosk/node-memory-cache",
  "dependencies": {},
  "engines": {
    "node": ">= 0.8.11"
  },
  "devDependencies": {
    "vows": "0.6.3"
  },
  "license": "GNU AFFERO GENERAL PUBLIC LICENSE",
  "repository": {
    "type": "git",
    "url": "https://github.com/thefosk/node-memory-cache"
  },
  "main": "./index",
  "directories": {
    "lib": "./lib"
  },
  "bugs": {
    "url": "https://github.com/thefosk/node-memory-cache/issues",
    "email": "marco@mashape.com"
  },
  "readme": "# node-memory-cache\n\nA lightweight memory caching module for node.js:\n\n* Key/Value store, except that for each key you can store multiple properties, like: `key.property1` or `key.property2`.\n* Native support for counters.\n* You can set different expirations on properties, like: `key.property1` expires every 1000ms, and `key.property2` every 5000ms.\n\n# Installation\n\n`npm install node-memory-cache`\n\n# Usage\n\n```javascript\nvar cache = require('node-memory-cache');\n\n// Set an object property\ncache.set(\"ObjectId\", \"ObjectProperty\", \"Value\");\n\n// Set an object property with a 3000ms expiration\ncache.set(\"ObjectId\", \"ObjectPropertyWithExpiration\", \"Another Value\", 3000);\n\n// Get the object properties\ncache.get(\"ObjectId\", \"ObjectProperty\");\ncache.get(\"ObjectId\", \"ObjectPropertyWithExpiration\");\n\n// Set a new property that is a counter, and increment it with +1\ncache.increment(\"ObjectId\", \"CounterProperty\", 1);\n\n// Set a new property that is a counter, and increment it with +10, with a 5000ms expiration.\ncache.increment(\"ObjectId\", \"CounterPropertyWithExpiration\", 10, 5000);\n\n// Decrementing a value, it is like incrementing it with a negative amount\ncache.increment(\"ObjectId\", \"CounterProperty\", -5);\n\n// Expiration dates can be overwritten by specifying them again\ncache.set(\"ObjectId\", \"ObjectPropertyWithExpiration\", \"Value\", 3000);\ncache.set(\"ObjectId\", \"ObjectPropertyWithExpiration\", \"Another Value\", 5000); // Now the expiration has been updated to 5000ms\n\n// The same for counters\ncache.increment(\"ObjectId\", \"CounterPropertyWithExpiration\", 1, 2000); // The counter has a 2000ms expiration\n\n// The counter still keeps a 2000ms expiration\ncache.increment(\"ObjectId\", \"CounterPropertyWithExpiration\", 3); \ncache.increment(\"ObjectId\", \"CounterPropertyWithExpiration\", 4);\n\n// We update the expiration date to 5000ms while incrementing the value\ncache.increment(\"ObjectId\", \"CounterPropertyWithExpiration\", 1, 5000);\n\n// To remove an expiration just set it to zero\ncache.increment(\"ObjectId\", \"CounterPropertyWithExpiration\", 1, 0); // We removed the expiration to this property\n\n// Delete a property/counter\ncache.delete(\"ObjectId\", \"ObjectProperty\");\n\n// Get all items stored\nvar data = cache.getAll();\n\n// Initialize the cache with some predefined data: expected to be in the same format as the return value of getAll()\ncache.populate(data);\n```\n\n# Support\n\nOpen an issue on GitHub.\n",
  "readmeFilename": "README.md",
  "_id": "node-memory-cache@0.0.5",
  "_from": "node-memory-cache@"
}
